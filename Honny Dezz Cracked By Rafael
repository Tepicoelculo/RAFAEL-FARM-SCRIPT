
local library =
    loadstring(game:HttpGet("https://raw.githubusercontent.com/memejames/elerium-v2-ui-library//main/Library", true))()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local VirtualInputManager = game:GetService("VirtualInputManager")
local VirtualUser = game:GetService("VirtualUser")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Lighting = game:GetService("Lighting")
local Stats = game:GetService("Stats")

local antiAFKConnection
local function setupAntiAFK()
    if antiAFKConnection then
        antiAFKConnection:Disconnect()
    end
    antiAFKConnection =
        player.Idled:Connect(
        function()
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new())
        end
    )
end
setupAntiAFK()

local function removePortals()
    for _, portal in pairs(game:GetDescendants()) do
        if portal.Name == "RobloxForwardPortals" then
            portal:Destroy()
        end
    end
    if _G.AdRemovalConnection then
        _G.AdRemovalConnection:Disconnect()
    end
    _G.AdRemovalConnection =
        game.DescendantAdded:Connect(
        function(descendant)
            if descendant.Name == "RobloxForwardPortals" then
                descendant:Destroy()
            end
        end
    )
end
removePortals()

local blockedFrames = {
    "strengthFrame",
    "durabilityFrame",
    "agilityFrame",
    "evilKarmaFrame",
    "goodKarmaFrame"
}
for _, name in ipairs(blockedFrames) do
    local frame = ReplicatedStorage:FindFirstChild(name)
    if frame and frame:IsA("GuiObject") then
        frame.Visible = false
    end
end
ReplicatedStorage.ChildAdded:Connect(
    function(child)
        if table.find(blockedFrames, child.Name) and child:IsA("GuiObject") then
            child.Visible = false
        end
    end
)

local window =
    library:AddWindow(
    "ðŸ‘‘ | HonnyDezz Family | CRACKED BY RAFAEL | ðŸ‘‘",
    {
        main_color = Color3.fromRGB(0, 0, 0),
        min_size = Vector2.new(750, 950),
        can_resize = true
    }
)

local MainTab = window:AddTab("Main")
local KillingTab = window:AddTab("Killing")
local FarmingTab = window:AddTab("Farming")
local PetsTab = window:AddTab("Pets")
local TeleportTab = window:AddTab("Teleports")
local MiscTab = window:AddTab("Misc")
local StatsTab = window:AddTab("Stats")
MainTab:Show()

_G.whitelistedPlayers = _G.whitelistedPlayers or {}
_G.blacklistedPlayers = _G.blacklistedPlayers or {}
local targetPlayer = nil
local selectedPet = "Darkstar Hunter"
local selectedAura = "Entropic Blast"

local function formatNumber(n)
    if n >= 1e15 then
        return string.format("%.1fqa", n / 1e15)
    elseif n >= 1e12 then
        return string.format("%.1ft", n / 1e12)
    elseif n >= 1e9 then
        return string.format("%.1fb", n / 1e9)
    elseif n >= 1e6 then
        return string.format("%.1fm", n / 1e6)
    elseif n >= 1e3 then
        return string.format("%.1fk", n / 1e3)
    else
        return tostring(math.floor(n))
    end
end

local function formatWithCommas(n)
    local formatted = tostring(math.floor(n))
    local k
    while true do
        formatted, k = string.gsub(formatted, "^(-?%d+)(%d%d%d)", "%1,%2")
        if k == 0 then
            break
        end
    end
    return formatted
end

local function checkCharacter()
    if not player.Character then
        repeat
            task.wait()
        until player.Character
    end
    return player.Character
end

local function gettool()
    for _, v in pairs(player.Backpack:GetChildren()) do
        if v.Name == "Punch" and player.Character:FindFirstChild("Humanoid") then
            player.Character.Humanoid:EquipTool(v)
        end
    end
    player.muscleEvent:FireServer("punch", "leftHand")
    player.muscleEvent:FireServer("punch", "rightHand")
end

local function isPlayerAlive(targetPlayer)
    return targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") and
        targetPlayer.Character:FindFirstChild("Humanoid") and
        targetPlayer.Character.Humanoid.Health > 0
end

local function killPlayer(target)
    if not isPlayerAlive(target) then
        return
    end
    local character = checkCharacter()
    if character and character:FindFirstChild("LeftHand") then
        pcall(
            function()
                firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 0)
                firetouchinterest(target.Character.HumanoidRootPart, character.LeftHand, 1)
                gettool()
            end
        )
    end
end

local function isWhitelisted(targetPlayer)
    for _, name in ipairs(_G.whitelistedPlayers) do
        if name:lower() == targetPlayer.Name:lower() then
            return true
        end
    end
    return false
end

local function isBlacklisted(targetPlayer)
    for _, name in ipairs(_G.blacklistedPlayers) do
        if name:lower() == targetPlayer.Name:lower() then
            return true
        end
    end
    return false
end

local function findClosestPlayer(input)
    if not input or input == "" then
        return nil
    end

    input = input:lower()
    local bestMatch = nil
    local bestScore = 0

    for _, targetPlayer in pairs(Players:GetPlayers()) do
        if targetPlayer ~= player then
            local username = targetPlayer.Name:lower()
            local displayName = targetPlayer.DisplayName:lower()

            local usernameMatch = username:find(input, 1, true) ~= nil
            local displayMatch = displayName:find(input, 1, true) ~= nil

            local usernameScore = 0
            local displayScore = 0

            if usernameMatch then
                usernameScore = (#input / #username) * 100
                if username:sub(1, #input) == input then
                    usernameScore = usernameScore + 50
                end
            end

            if displayMatch then
                displayScore = (#input / #displayName) * 100
                if displayName:sub(1, #input) == input then
                    displayScore = displayScore + 50
                end
            end

            local score = math.max(usernameScore, displayScore)

            if score > bestScore then
                bestScore = score
                bestMatch = targetPlayer
            end
        end
    end

    if bestScore > 20 then
        return bestMatch
    end

    return nil
end

local function calculateEnemyHealth(targetPlayer)
    if not targetPlayer then
        return 0
    end
    local baseDura = 0
    local durabilityStat =
        targetPlayer:FindFirstChild("Durability") or
        (targetPlayer:FindFirstChild("leaderstats") and targetPlayer.leaderstats:FindFirstChild("Durability"))
    if durabilityStat then
        baseDura = durabilityStat.Value
    end

    local totalMultiplier = 1
    local ultFolder = targetPlayer:FindFirstChild("ultimatesFolder")
    if ultFolder then
        local infernalHealth = ultFolder:FindFirstChild("Infernal Health")
        if infernalHealth then
            local upgrades = infernalHealth.Value or 0
            totalMultiplier = totalMultiplier + 0.15 * upgrades
        end
    end

    local backpack = targetPlayer:FindFirstChild("Backpack")
    if backpack then
        local equippedPets = backpack:FindFirstChild("EquippedPets") or backpack:FindFirstChild("equippedPets")
        if equippedPets then
            for _, pet in ipairs(equippedPets:GetChildren()) do
                if string.lower(tostring(pet)):match("mighty") and string.lower(tostring(pet)):match("monster") then
                    totalMultiplier = totalMultiplier + 0.5
                    break
                end
            end
        end
    end

    return baseDura * totalMultiplier
end

local function calculateLocalPlayerDamage()
    local strengthStat = nil
    local leaderstats = player:FindFirstChild("leaderstats")
    if leaderstats then
        strengthStat = leaderstats:FindFirstChild("Strength")
    end
    if not strengthStat then
        return 0
    end

    local baseDamage = strengthStat.Value * 0.0667
    local totalMultiplier = 1

    local ultFolder = player:FindFirstChild("ultimatesFolder")
    if ultFolder then
        local demonDamage = ultFolder:FindFirstChild("Demon Damage")
        if demonDamage then
            local upgrades = demonDamage.Value or 0
            totalMultiplier = totalMultiplier + math.min(0.1 * upgrades, 0.5)
        end
    end

    local backpack = player:FindFirstChild("Backpack")
    if backpack then
        local equippedPets = backpack:FindFirstChild("EquippedPets") or backpack:FindFirstChild("equippedPets")
        if equippedPets then
            for _, pet in ipairs(equippedPets:GetChildren()) do
                if string.lower(tostring(pet)):match("wild") and string.lower(tostring(pet)):match("wizard") then
                    totalMultiplier = totalMultiplier + 0.5
                    break
                end
            end
        end
    end

    return baseDamage * totalMultiplier
end

MainTab:AddLabel("Essential Features")

local antiKnockbackSwitch =
    MainTab:AddSwitch(
    "Anti Fling",
    function(bool)
        if bool then
            local playerName = player.Name
            local character = game.Workspace:FindFirstChild(playerName)
            if character then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local bodyVelocity = Instance.new("BodyVelocity")
                    bodyVelocity.MaxForce = Vector3.new(100000, 0, 100000)
                    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
                    bodyVelocity.P = 1250
                    bodyVelocity.Parent = rootPart
                end
            end
        else
            local playerName = player.Name
            local character = game.Workspace:FindFirstChild(playerName)
            if character then
                local rootPart = character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local existingVelocity = rootPart:FindFirstChild("BodyVelocity")
                    if existingVelocity and existingVelocity.MaxForce == Vector3.new(100000, 0, 100000) then
                        existingVelocity:Destroy()
                    end
                end
            end
        end
    end
)
antiKnockbackSwitch:Set(true)

local lockRunning = false
local lockSwitch =
    MainTab:AddSwitch(
    "Lock Position",
    function(state)
        lockRunning = state
        if lockRunning then
            local char = player.Character or player.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            local lockPosition = hrp.Position

            task.spawn(
                function()
                    while lockRunning do
                        if hrp and hrp.Parent then
                            hrp.Velocity = Vector3.new(0, 0, 0)
                            hrp.RotVelocity = Vector3.new(0, 0, 0)
                            hrp.CFrame = CFrame.new(lockPosition)
                        end
                        wait(0.05)
                    end
                end
            )
        end
    end
)

MainTab:AddSwitch(
    "Show Pets",
    function(bool)
        if player:FindFirstChild("hidePets") then
            player.hidePets.Value = not bool
        end
    end
)

MainTab:AddSwitch(
    "Show Other Pets",
    function(bool)
        if player:FindFirstChild("showOtherPetsOn") then
            player.showOtherPetsOn.Value = bool
        end
    end
)

local parts = {}
local partSize = 2048
local totalDistance = 50000
local startPosition = Vector3.new(-2, -9.5, -2)

local function createAllParts()
    local numberOfParts = math.ceil(totalDistance / partSize)
    for x = 0, numberOfParts - 1 do
        for z = 0, numberOfParts - 1 do
            local function createPart(pos, name)
                local part = Instance.new("Part")
                part.Size = Vector3.new(partSize, 1, partSize)
                part.Position = pos
                part.Anchored = true
                part.Transparency = 1
                part.CanCollide = true
                part.Name = name
                part.Parent = workspace
                return part
            end

            table.insert(
                parts,
                createPart(startPosition + Vector3.new(x * partSize, 0, z * partSize), "Part_Side_" .. x .. "_" .. z)
            )
            table.insert(
                parts,
                createPart(
                    startPosition + Vector3.new(-x * partSize, 0, z * partSize),
                    "Part_LeftRight_" .. x .. "_" .. z
                )
            )
            table.insert(
                parts,
                createPart(
                    startPosition + Vector3.new(-x * partSize, 0, -z * partSize),
                    "Part_UpLeft_" .. x .. "_" .. z
                )
            )
            table.insert(
                parts,
                createPart(
                    startPosition + Vector3.new(x * partSize, 0, -z * partSize),
                    "Part_UpRight_" .. x .. "_" .. z
                )
            )
        end
    end
end
task.spawn(createAllParts)

MainTab:AddSwitch(
    "Walk on Water",
    function(bool)
        for _, part in ipairs(parts) do
            if part and part.Parent then
                part.CanCollide = bool
            end
        end
    end
)

local autoFolder = MainTab:AddFolder("Auto Features")

autoFolder:AddSwitch(
    "Auto Spin Wheel",
    function(bool)
        _G.AutoSpinWheel = bool

        if bool then
            task.spawn(
                function()
                    while _G.AutoSpinWheel and wait(1) do
                        ReplicatedStorage.rEvents.openFortuneWheelRemote:InvokeServer(
                            "openFortuneWheel",
                            ReplicatedStorage.fortuneWheelChances["Fortune Wheel"]
                        )
                    end
                end
            )
        end
    end
)

autoFolder:AddSwitch(
    "Auto Claim Gifts",
    function(bool)
        _G.AutoClaimGifts = bool

        if bool then
            task.spawn(
                function()
                    while _G.AutoClaimGifts and wait(1) do
                        for i = 1, 8 do
                            ReplicatedStorage.rEvents.freeGiftClaimRemote:InvokeServer("claimGift", i)
                        end
                    end
                end
            )
        end
    end
)

local rebirthFolder = MainTab:AddFolder("Rebirth System")
local targetRebirthValue = 100

rebirthFolder:AddTextBox(
    "Target Rebirths",
    function(text)
        local newValue = tonumber(text)
        if newValue and newValue > 0 then
            targetRebirthValue = newValue
        end
    end
)

local targetSwitch =
    rebirthFolder:AddSwitch(
    "Auto Rebirth Target",
    function(bool)
        _G.targetRebirthActive = bool

        if bool then
            task.spawn(
                function()
                    while _G.targetRebirthActive and wait(0.1) do
                        local currentRebirths = player.leaderstats.Rebirths.Value

                        if currentRebirths >= targetRebirthValue then
                            targetSwitch:Set(false)
                            _G.targetRebirthActive = false
                            break
                        end

                        ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                    end
                end
            )
        end
    end
)

rebirthFolder:AddSwitch(
    "Auto Rebirth (Infinite)",
    function(bool)
        _G.infiniteRebirthActive = bool

        if bool then
            task.spawn(
                function()
                    while _G.infiniteRebirthActive and wait(0.1) do
                        ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                    end
                end
            )
        end
    end
)

rebirthFolder:AddSwitch(
    "Auto Size 1",
    function(bool)
        _G.autoSizeActive = bool

        if bool then
            task.spawn(
                function()
                    while _G.autoSizeActive and wait() do
                        ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer("changeSize", 1)
                    end
                end
            )
        end
    end
)

rebirthFolder:AddSwitch(
    "Auto Teleport To King",
    function(bool)
        _G.teleportActive = bool

        if bool then
            task.spawn(
                function()
                    while _G.teleportActive and wait() do
                        if player.Character then
                            player.Character:MoveTo(Vector3.new(-8646, 17, -5738))
                        end
                    end
                end
            )
        end
    end
)

KillingTab:AddLabel("Player Management")

local petDropdown =
    KillingTab:AddDropdown(
    "Select Killing Pet",
    function(text)
        local petsFolder = player.petsFolder
        for _, folder in pairs(petsFolder:GetChildren()) do
            if folder:IsA("Folder") then
                for _, pet in pairs(folder:GetChildren()) do
                    ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
                end
            end
        end
        task.wait(0.2)

        local petsToEquip = {}
        for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
            if pet.Name == text then
                table.insert(petsToEquip, pet)
            end
        end

        for i = 1, math.min(8, #petsToEquip) do
            ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", petsToEquip[i])
            task.wait(0.1)
        end
    end
)
petDropdown:Add("Wild Wizard")
petDropdown:Add("Mighty Monster")

KillingTab:AddSwitch(
    "Remove Attack Animations",
    function(bool)
        if bool then
            local blockedAnimations = {
                ["rbxassetid://3638729053"] = true,
                ["rbxassetid://3638767427"] = true
            }

            local function setupAnimationBlocking()
                local char = player.Character
                if not char or not char:FindFirstChild("Humanoid") then
                    return
                end

                local humanoid = char:FindFirstChild("Humanoid")
                for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
                    if track.Animation then
                        local animId = track.Animation.AnimationId
                        local animName = track.Name:lower()

                        if
                            blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or
                                animName:match("right")
                         then
                            track:Stop()
                        end
                    end
                end

                _G.AnimBlockConnection =
                    humanoid.AnimationPlayed:Connect(
                    function(track)
                        if track.Animation then
                            local animId = track.Animation.AnimationId
                            local animName = track.Name:lower()

                            if
                                blockedAnimations[animId] or animName:match("punch") or animName:match("attack") or
                                    animName:match("right")
                             then
                                track:Stop()
                            end
                        end
                    end
                )
            end

            setupAnimationBlocking()

            _G.CharacterAddedConnection =
                player.CharacterAdded:Connect(
                function(newChar)
                    task.wait(1)
                    setupAnimationBlocking()
                end
            )
        else
            if _G.AnimBlockConnection then
                _G.AnimBlockConnection:Disconnect()
                _G.AnimBlockConnection = nil
            end
            if _G.CharacterAddedConnection then
                _G.CharacterAddedConnection:Disconnect()
                _G.CharacterAddedConnection = nil
            end
        end
    end
)

local targetPosition = Vector3.new(-39, 2, 22)
local teleportBackRange = 10
local isNanActive = false

local function checkPositionAndTeleport()
    if not isNanActive or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local rootPart = player.Character.HumanoidRootPart
    local currentPosition = rootPart.Position
    local distance = (currentPosition - targetPosition).Magnitude

    if distance > teleportBackRange then
        rootPart.CFrame = CFrame.new(targetPosition)
    end
end

KillingTab:AddSwitch(
    "NaN Size",
    function(bool)
        isNanActive = bool

        if bool then
            local args = {[1] = "changeSize", [2] = 0 / 0}
            ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer(unpack(args))
            _G.teleportLoop = RunService.Heartbeat:Connect(checkPositionAndTeleport)
        else
            if _G.teleportLoop then
                _G.teleportLoop:Disconnect()
                _G.teleportLoop = nil
            end
            local args = {[1] = "changeSize", [2] = 2}
            ReplicatedStorage.rEvents.changeSpeedSizeRemote:InvokeServer(unpack(args))
        end
    end
)

local autoKillFolder = KillingTab:AddFolder("Auto Kill Systems")

autoKillFolder:AddSwitch(
    "Kill Everyone",
    function(bool)
        _G.killAll = bool
        if bool then
            if not _G.killAllConnection then
                _G.killAllConnection =
                    RunService.Heartbeat:Connect(
                    function()
                        if _G.killAll then
                            for _, targetPlayer in ipairs(Players:GetPlayers()) do
                                if targetPlayer ~= player and not isWhitelisted(targetPlayer) then
                                    killPlayer(targetPlayer)
                                end
                            end
                        end
                    end
                )
            end
        else
            if _G.killAllConnection then
                _G.killAllConnection:Disconnect()
                _G.killAllConnection = nil
            end
        end
    end
)

autoKillFolder:AddSwitch(
    "Whitelist Friends",
    function(bool)
        _G.whitelistFriends = bool

        if bool then
            for _, targetPlayer in pairs(Players:GetPlayers()) do
                if targetPlayer ~= player and targetPlayer:IsFriendsWith(player.UserId) then
                    local playerName = targetPlayer.Name
                    local alreadyWhitelisted = false
                    for _, name in ipairs(_G.whitelistedPlayers) do
                        if name:lower() == playerName:lower() then
                            alreadyWhitelisted = true
                            break
                        end
                    end
                    if not alreadyWhitelisted then
                        table.insert(_G.whitelistedPlayers, playerName)
                    end
                end
            end

            Players.PlayerAdded:Connect(
                function(newPlayer)
                    if _G.whitelistFriends and newPlayer:IsFriendsWith(player.UserId) then
                        local playerName = newPlayer.Name
                        local alreadyWhitelisted = false
                        for _, name in ipairs(_G.whitelistedPlayers) do
                            if name:lower() == playerName:lower() then
                                alreadyWhitelisted = true
                                break
                            end
                        end
                        if not alreadyWhitelisted then
                            table.insert(_G.whitelistedPlayers, playerName)
                        end
                    end
                end
            )
        end
    end
)

local killListFolder = KillingTab:AddFolder("Kill List System")

local blacklistDropdown =
    killListFolder:AddDropdown(
    "Add to Kill List",
    function(selectedText)
        local playerName = selectedText:match("| (.+)$") or selectedText
        if playerName then
            playerName = playerName:gsub("^%s*(.-)%s*$", "%1")
            for _, name in ipairs(_G.blacklistedPlayers) do
                if name:lower() == playerName:lower() then
                    return
                end
            end
            table.insert(_G.blacklistedPlayers, playerName)
        end
    end
)

killListFolder:AddSwitch(
    "Kill List Active",
    function(bool)
        _G.killBlacklistedOnly = bool
        if bool then
            if not _G.blacklistKillConnection then
                _G.blacklistKillConnection =
                    RunService.Heartbeat:Connect(
                    function()
                        if _G.killBlacklistedOnly then
                            for _, targetPlayer in ipairs(Players:GetPlayers()) do
                                if targetPlayer ~= player and isBlacklisted(targetPlayer) then
                                    killPlayer(targetPlayer)
                                end
                            end
                        end
                    end
                )
            end
        else
            if _G.blacklistKillConnection then
                _G.blacklistKillConnection:Disconnect()
                _G.blacklistKillConnection = nil
            end
        end
    end
)

local whitelistFolder = KillingTab:AddFolder("Whitelist Management")

whitelistFolder:AddTextBox(
    "Add Player to Whitelist",
    function(text)
        if text and text ~= "" then
            local foundPlayer = findClosestPlayer(text)
            if foundPlayer then
                local playerInfo = foundPlayer.Name .. " (" .. foundPlayer.DisplayName .. ")"

                local alreadyWhitelisted = false
                for _, info in ipairs(_G.whitelistedPlayers) do
                    if info:find(foundPlayer.Name, 1, true) then
                        alreadyWhitelisted = true
                        break
                    end
                end

                if not alreadyWhitelisted then
                    table.insert(_G.whitelistedPlayers, foundPlayer.Name)
                end
            end
        end
    end
)

whitelistFolder:AddTextBox(
    "Remove Player from Whitelist",
    function(text)
        if text and text ~= "" then
            local textLower = text:lower()
            for i, playerName in ipairs(_G.whitelistedPlayers) do
                if playerName:lower():find(textLower, 1, true) then
                    table.remove(_G.whitelistedPlayers, i)
                    return
                end
            end

            local foundPlayer = findClosestPlayer(text)
            if foundPlayer then
                for i, playerName in ipairs(_G.whitelistedPlayers) do
                    if playerName:lower() == foundPlayer.Name:lower() then
                        table.remove(_G.whitelistedPlayers, i)
                        break
                    end
                end
            end
        end
    end
)

whitelistFolder:AddButton(
    "Clear Whitelist",
    function()
        _G.whitelistedPlayers = {}
    end
)

whitelistFolder:AddButton(
    "Clear Kill List",
    function()
        _G.blacklistedPlayers = {}
    end
)

local targetFolder = KillingTab:AddFolder("Target System")

targetFolder:AddTextBox(
    "Select Target Player",
    function(text)
        if text and text ~= "" then
            local foundPlayer = findClosestPlayer(text)
            if foundPlayer then
                targetPlayer = foundPlayer
            end
        end
    end
)

targetFolder:AddButton(
    "Remove Target",
    function()
        targetPlayer = nil
    end
)

targetFolder:AddSwitch(
    "Auto Kill Target",
    function(bool)
        _G.autoKillTarget = bool

        if bool and targetPlayer then
            task.spawn(
                function()
                    while _G.autoKillTarget and targetPlayer do
                        if isPlayerAlive(targetPlayer) then
                            killPlayer(targetPlayer)
                        end
                        task.wait(0.1)
                    end
                end
            )
        end
    end
)

targetFolder:AddButton(
    "Kill Target Once",
    function()
        if targetPlayer then
            killPlayer(targetPlayer)
        end
    end
)

local deathRingFolder = KillingTab:AddFolder("Death Ring")
_G.deathRingRange = 20

deathRingFolder:AddTextBox(
    "Ring Range (1-140)",
    function(text)
        local range = tonumber(text)
        if range then
            _G.deathRingRange = math.clamp(range, 1, 140)
        end
    end
)

local ringPart = nil
deathRingFolder:AddSwitch(
    "Show Ring Visual",
    function(bool)
        if bool then
            ringPart = Instance.new("Part")
            ringPart.Shape = Enum.PartType.Cylinder
            ringPart.Material = Enum.Material.Neon
            ringPart.Color = Color3.fromRGB(50, 163, 255)
            ringPart.Transparency = 0.6
            ringPart.Anchored = true
            ringPart.CanCollide = false
            ringPart.CastShadow = false
            local diameter = _G.deathRingRange * 2
            ringPart.Size = Vector3.new(0.2, diameter, diameter)
            ringPart.Parent = workspace
        elseif ringPart then
            ringPart:Destroy()
            ringPart = nil
        end
    end
)

deathRingFolder:AddSwitch(
    "Death Ring Active",
    function(bool)
        _G.deathRingEnabled = bool

        if bool then
            if not _G.deathRingConnection then
                _G.deathRingConnection =
                    RunService.Heartbeat:Connect(
                    function()
                        if ringPart then
                            local character = checkCharacter()
                            local rootPart = character and character:FindFirstChild("HumanoidRootPart")
                            if rootPart then
                                ringPart.CFrame = rootPart.CFrame * CFrame.Angles(0, 0, math.rad(90))
                            end
                        end

                        local character = checkCharacter()
                        local myPosition =
                            character and character:FindFirstChild("HumanoidRootPart") and
                            character.HumanoidRootPart.Position
                        if not myPosition then
                            return
                        end

                        for _, targetPlayer in ipairs(Players:GetPlayers()) do
                            if
                                targetPlayer ~= player and not isWhitelisted(targetPlayer) and
                                    isPlayerAlive(targetPlayer)
                             then
                                local distance =
                                    (myPosition - targetPlayer.Character.HumanoidRootPart.Position).Magnitude
                                if distance <= (_G.deathRingRange or 20) then
                                    killPlayer(targetPlayer)
                                end
                            end
                        end
                    end
                )
            end
        else
            if _G.deathRingConnection then
                _G.deathRingConnection:Disconnect()
                _G.deathRingConnection = nil
            end
        end
    end
)

local spectateFolder = KillingTab:AddFolder("Spectate System")
local selectedPlayerToSpectate = nil
local spectating = false
local currentTargetConnection = nil
local camera = workspace.CurrentCamera

local function updateSpectateTarget(targetPlayer)
    if currentTargetConnection then
        currentTargetConnection:Disconnect()
    end

    if targetPlayer and targetPlayer.Character then
        local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            camera.CameraSubject = humanoid
            currentTargetConnection =
                targetPlayer.CharacterAdded:Connect(
                function(newChar)
                    task.wait(0.2)
                    local newHumanoid = newChar:FindFirstChildOfClass("Humanoid")
                    if newHumanoid then
                        camera.CameraSubject = newHumanoid
                    end
                end
            )
        end
    end
end

local spectateDropdown =
    spectateFolder:AddDropdown(
    "Choose Player to Spectate",
    function(text)
        for _, targetPlayer in ipairs(Players:GetPlayers()) do
            local optionText = targetPlayer.DisplayName .. " | " .. targetPlayer.Name
            if text == optionText then
                selectedPlayerToSpectate = targetPlayer
                if spectating then
                    updateSpectateTarget(targetPlayer)
                end
                break
            end
        end
    end
)

spectateFolder:AddSwitch(
    "Spectate",
    function(bool)
        spectating = bool
        if spectating and selectedPlayerToSpectate then
            updateSpectateTarget(selectedPlayerToSpectate)
        else
            if currentTargetConnection then
                currentTargetConnection:Disconnect()
                currentTargetConnection = nil
            end
            local localPlayer = player
            if localPlayer.Character then
                local humanoid = localPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    camera.CameraSubject = humanoid
                end
            end
        end
    end
)

local playerStatsFolder = KillingTab:AddFolder("Player Stats")

local playerToInspect = nil
local statDefinitions = {
    {name = "Strength", statName = "Strength"},
    {name = "Rebirths", statName = "Rebirths"},
    {name = "Durability", statName = "Durability"},
    {name = "Agility", statName = "Agility"},
    {name = "Kills", statName = "Kills"},
    {name = "Evil Karma", statName = "evilKarma"},
    {name = "Good Karma", statName = "goodKarma"},
    {name = "Brawls", statName = "Brawls"}
}

local inspectDropdown =
    playerStatsFolder:AddDropdown(
    "Choose Player to Inspect",
    function(text)
        for _, targetPlayer in ipairs(Players:GetPlayers()) do
            local optionText = targetPlayer.DisplayName .. " | " .. targetPlayer.Name
            if text == optionText then
                playerToInspect = targetPlayer
                break
            end
        end
    end
)

local playerNameLabel = playerStatsFolder:AddLabel("Name: N/A")
local playerUsernameLabel = playerStatsFolder:AddLabel("Username: N/A")
local enemyHealthLabel = playerStatsFolder:AddLabel("Enemy Health: N/A")
local playerDamageLabel = playerStatsFolder:AddLabel("Your Damage: N/A")
local hitsToKillLabel = playerStatsFolder:AddLabel("Hits to Kill: N/A")

local statLabels = {}
for _, info in ipairs(statDefinitions) do
    statLabels[info.name] = playerStatsFolder:AddLabel(info.name .. ": 0 (0)")
end

local function updateStatLabels(targetPlayer)
    if not targetPlayer then
        return
    end

    playerNameLabel.Text = "Name: " .. targetPlayer.DisplayName
    playerUsernameLabel.Text = "Username: " .. targetPlayer.Name

    local leaderstats = targetPlayer:FindFirstChild("leaderstats")
    if not leaderstats then
        return
    end

    for _, info in ipairs(statDefinitions) do
        local statObject

        if leaderstats:FindFirstChild(info.statName) then
            statObject = leaderstats:FindFirstChild(info.statName)
        elseif targetPlayer:FindFirstChild(info.statName) then
            statObject = targetPlayer:FindFirstChild(info.statName)
        end

        if statObject then
            local value = statObject.Value
            statLabels[info.name].Text =
                string.format("%s: %s (%s)", info.name, formatNumber(value), formatWithCommas(value))
        else
            statLabels[info.name].Text = info.name .. ": 0 (0)"
        end
    end

    local enemyHealth = calculateEnemyHealth(targetPlayer)
    local playerDamage = calculateLocalPlayerDamage()
    local hitsToKill = playerDamage > 0 and math.ceil(enemyHealth / playerDamage) or "âˆž"

    enemyHealthLabel.Text =
        "Enemy Health: " .. formatNumber(enemyHealth) .. " (" .. formatWithCommas(enemyHealth) .. ")"
    playerDamageLabel.Text =
        "Your Damage: " .. formatNumber(playerDamage) .. " (" .. formatWithCommas(playerDamage) .. ")"
    hitsToKillLabel.Text = "Hits to Kill: " .. tostring(hitsToKill)
end

task.spawn(
    function()
        while true do
            if playerToInspect then
                updateStatLabels(playerToInspect)
            end
            task.wait(0.2)
        end
    end
)

for _, targetPlayer in ipairs(Players:GetPlayers()) do
    if targetPlayer ~= player then
        local displayText = targetPlayer.DisplayName .. " | " .. targetPlayer.Name
        spectateDropdown:Add(displayText)
        inspectDropdown:Add(displayText)
    end
end

Players.PlayerAdded:Connect(
    function(newPlayer)
        if newPlayer ~= player then
            local displayText = newPlayer.DisplayName .. " | " .. newPlayer.Name
            spectateDropdown:Add(displayText)
            inspectDropdown:Add(displayText)
            blacklistDropdown:Add(displayText)
        end
    end
)

local whitelistLabel = KillingTab:AddLabel("Whitelist: None")
local blacklistLabel = KillingTab:AddLabel("Kill List: None")

local function updateWhitelistLabel()
    if #_G.whitelistedPlayers == 0 then
        whitelistLabel.Text = "Whitelist: None"
    else
        whitelistLabel.Text = "Whitelist: " .. table.concat(_G.whitelistedPlayers, ", ")
    end
end

local function updateBlacklistLabel()
    if #_G.blacklistedPlayers == 0 then
        blacklistLabel.Text = "Kill List: None"
    else
        blacklistLabel.Text = "Kill List: " .. table.concat(_G.blacklistedPlayers, ", ")
    end
end

task.spawn(
    function()
        while true do
            updateWhitelistLabel()
            updateBlacklistLabel()
            task.wait(0.5)
        end
    end
)

FarmingTab:AddLabel("Farming Systems")

local fastFarmFolder = FarmingTab:AddFolder("Fast Strength Farm")

local totalReps = 20
local threadCount = 1
local durationSeconds = 2
local repsPerTick = 1
local isFarmingActive = false

local function updateRepsPerTick()
    local ticksPerSecond = 30
    local totalTicks = durationSeconds * ticksPerSecond
    local repsPerThread = totalReps / threadCount
    repsPerTick = repsPerThread / totalTicks
    if repsPerTick < 1 then
        repsPerTick = 1
    else
        repsPerTick = math.floor(repsPerTick)
    end
end

local function repWorker(duration)
    local startTime = os.clock()
    while os.clock() - startTime < duration and isFarmingActive do
        for i = 1, repsPerTick do
            player.muscleEvent:FireServer("rep")
        end
        task.wait()
    end
end

local function startFarming()
    if isFarmingActive then
        return
    end
    isFarmingActive = true

    for _ = 1, threadCount do
        task.spawn(
            function()
                while isFarmingActive do
                    repWorker(durationSeconds)
                end
            end
        )
    end
end

local function stopFarming()
    isFarmingActive = false
end

fastFarmFolder:AddTextBox(
    "Total Reps",
    function(value)
        local num = tonumber(value)
        if num and num > 0 then
            totalReps = num
            updateRepsPerTick()
        end
    end
)

fastFarmFolder:AddTextBox(
    "Threads",
    function(value)
        local num = tonumber(value)
        if num and num > 0 then
            threadCount = math.floor(num)
            updateRepsPerTick()
        end
    end
)

fastFarmFolder:AddTextBox(
    "Seconds",
    function(value)
        local num = tonumber(value)
        if num and num > 0 then
            durationSeconds = num
            updateRepsPerTick()
        end
    end
)

fastFarmFolder:AddSwitch(
    "Fast Rep Farm",
    function(state)
        if state then
            startFarming()
        else
            stopFarming()
        end
    end
)

FarmingTab:AddSwitch(
    "Auto Lift (Gamepass)",
    function(bool)
        if bool then
            local gamepassFolder = ReplicatedStorage.gamepassIds
            for _, gamepass in pairs(gamepassFolder:GetChildren()) do
                local value = Instance.new("IntValue")
                value.Name = gamepass.Name
                value.Value = gamepass.Value
                value.Parent = player.ownedGamepasses
            end
        else
            if player and player.ownedGamepasses then
                local gamepassFolder = ReplicatedStorage.gamepassIds
                for _, gamepass in pairs(gamepassFolder:GetChildren()) do
                    local ownedPass = player.ownedGamepasses:FindFirstChild(gamepass.Name)
                    if ownedPass and ownedPass.Value == gamepass.Value then
                        ownedPass:Destroy()
                    end
                end
            end
        end
    end
)

FarmingTab:AddSwitch(
    "Auto Punch (No Animation)",
    function(enabled)
        _G.autoPunching = enabled

        if _G.autoPunching then
            task.spawn(
                function()
                    local tool = player.Backpack:FindFirstChild("Punch") or player.Character:FindFirstChild("Punch")
                    if not tool then
                        repeat
                            tool = player.Backpack:FindFirstChild("Punch") or player.Character:FindFirstChild("Punch")
                            task.wait(0.1)
                        until tool
                    end

                    if tool.Parent == player.Backpack then
                        tool.Parent = player.Character
                    end

                    local hand = "leftHand"
                    while _G.autoPunching do
                        if player:FindFirstChild("muscleEvent") then
                            player.muscleEvent:FireServer("punch", hand)
                            hand = (hand == "leftHand") and "rightHand" or "leftHand"
                        end
                        task.wait(0.2)
                    end
                end
            )
        else
            local tool = player.Character:FindFirstChild("Punch")
            if tool then
                tool.Parent = player.Backpack
            end
        end
    end
)

local toolsFolder = FarmingTab:AddFolder("Tool Automation")

local selectedTool = nil
local autoFarm = false

local toolDropdown =
    toolsFolder:AddDropdown(
    "Select Tool",
    function(selection)
        selectedTool = selection
    end
)

local toolList = {"Weight", "Pushups", "Situps", "Handstands", "Fast Punch", "Stomp", "Ground Slam"}
for _, tool in ipairs(toolList) do
    toolDropdown:Add(tool)
end

toolsFolder:AddSwitch(
    "Start Tool Farm",
    function(enabled)
        autoFarm = enabled

        if enabled then
            task.spawn(
                function()
                    while autoFarm do
                        if selectedTool == "Weight" then
                            if not player.Character:FindFirstChild("Weight") then
                                local weightTool = player.Backpack:FindFirstChild("Weight")
                                if weightTool then
                                    player.Character.Humanoid:EquipTool(weightTool)
                                end
                            end
                            player.muscleEvent:FireServer("rep")
                        elseif selectedTool == "Pushups" then
                            if not player.Character:FindFirstChild("Pushups") then
                                local pushupsTool = player.Backpack:FindFirstChild("Pushups")
                                if pushupsTool then
                                    player.Character.Humanoid:EquipTool(pushupsTool)
                                end
                            end
                            player.muscleEvent:FireServer("rep")
                        elseif selectedTool == "Situps" then
                            if not player.Character:FindFirstChild("Situps") then
                                local situpsTool = player.Backpack:FindFirstChild("Situps")
                                if situpsTool then
                                    player.Character.Humanoid:EquipTool(situpsTool)
                                end
                            end
                            player.muscleEvent:FireServer("rep")
                        elseif selectedTool == "Handstands" then
                            if not player.Character:FindFirstChild("Handstands") then
                                local handstandsTool = player.Backpack:FindFirstChild("Handstands")
                                if handstandsTool then
                                    player.Character.Humanoid:EquipTool(handstandsTool)
                                end
                            end
                            player.muscleEvent:FireServer("rep")
                        elseif selectedTool == "Fast Punch" then
                            local punch = player.Backpack:FindFirstChild("Punch")
                            if punch then
                                punch.Parent = player.Character
                                if punch:FindFirstChild("attackTime") then
                                    punch.attackTime.Value = 0
                                end
                            end
                            player.muscleEvent:FireServer("punch", "rightHand")
                            player.muscleEvent:FireServer("punch", "leftHand")

                            if player.Character:FindFirstChild("Punch") then
                                player.Character.Punch:Activate()
                            end
                        elseif selectedTool == "Stomp" then
                            local stomp = player.Backpack:FindFirstChild("Stomp")
                            if stomp then
                                stomp.Parent = player.Character
                                if stomp:FindFirstChild("attackTime") then
                                    stomp.attackTime.Value = 0
                                end
                            end
                            player.muscleEvent:FireServer("stomp")

                            if player.Character:FindFirstChild("Stomp") then
                                player.Character.Stomp:Activate()
                            end
                        elseif selectedTool == "Ground Slam" then
                            local groundSlam = player.Backpack:FindFirstChild("Ground Slam")
                            if groundSlam then
                                groundSlam.Parent = player.Character
                                if groundSlam:FindFirstChild("attackTime") then
                                    groundSlam.attackTime.Value = 0
                                end
                            end
                            player.muscleEvent:FireServer("slam")

                            if player.Character:FindFirstChild("Ground Slam") then
                                player.Character["Ground Slam"]:Activate()
                            end
                        end

                        task.wait()
                    end
                end
            )
        else
            if selectedTool and player.Character:FindFirstChild(selectedTool) then
                player.Character:FindFirstChild(selectedTool).Parent = player.Backpack
            end
        end
    end
)

local rockFolder = FarmingTab:AddFolder("Rock Farming")

local rockData = {
    ["Tiny Rock"] = 0,
    ["Starter Rock"] = 100,
    ["Punching Rock"] = 1000,
    ["Golden Rock"] = 5000,
    ["Frost Rock"] = 150000,
    ["Mythical Rock"] = 400000,
    ["Eternal Rock"] = 750000,
    ["Legend Rock"] = 1000000,
    ["Muscle King Rock"] = 5000000,
    ["Jungle Rock"] = 10000000
}

local selectedRock = nil
local rockDropdown =
    rockFolder:AddDropdown(
    "Select Rock",
    function(selection)
        selectedRock = selection
    end
)

for rockName in pairs(rockData) do
    rockDropdown:Add(rockName)
end

rockFolder:AddSwitch(
    "Auto Rock Farm",
    function(enabled)
        getgenv().RockFarmRunning = enabled

        if enabled and selectedRock then
            task.spawn(
                function()
                    local requiredDurability = rockData[selectedRock]

                    while getgenv().RockFarmRunning do
                        task.wait()
                        if player.Durability.Value >= requiredDurability then
                            for _, v in pairs(workspace.machinesFolder:GetDescendants()) do
                                if
                                    v.Name == "neededDurability" and v.Value == requiredDurability and
                                        player.Character:FindFirstChild("LeftHand") and
                                        player.Character:FindFirstChild("RightHand")
                                 then
                                    local rock = v.Parent:FindFirstChild("Rock")
                                    if rock then
                                        firetouchinterest(rock, player.Character.RightHand, 0)
                                        firetouchinterest(rock, player.Character.RightHand, 1)
                                        firetouchinterest(rock, player.Character.LeftHand, 0)
                                        firetouchinterest(rock, player.Character.LeftHand, 1)
                                        gettool()
                                    end
                                end
                            end
                        end
                    end
                end
            )
        end
    end
)

local machineFolder = FarmingTab:AddFolder("Machine Farming")

local selectedLocation = nil
local selectedWorkout = nil
local working = false

local function pressE()
    VirtualInputManager:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, "E", false, game)
end

local function autoLift()
    while working and task.wait() do
        player.muscleEvent:FireServer("rep")
    end
end

local function teleportAndStart(machineName, position)
    local char = player.Character
    if char and char:FindFirstChild("HumanoidRootPart") then
        char.HumanoidRootPart.CFrame = position
        task.wait(0.5)
        pressE()
        if working then
            task.spawn(autoLift)
        end
    end
end

local workoutPositions = {
    ["Bench Press"] = {
        ["Jungle Gym"] = CFrame.new(-8173, 64, 1898),
        ["Muscle King Gym"] = CFrame.new(-8590.06152, 46.0167427, -6043.34717),
        ["Legend Gym"] = CFrame.new(4111.91748, 1020.46674, -3799.97217)
    },
    ["Squat"] = {
        ["Jungle Gym"] = CFrame.new(-8352, 34, 2878),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334)
    },
    ["Pull Up"] = {
        ["Jungle Gym"] = CFrame.new(-8666, 34, 2070),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334)
    },
    ["Boulder"] = {
        ["Jungle Gym"] = CFrame.new(-8621, 34, 2684),
        ["Muscle King Gym"] = CFrame.new(-8940.12402, 13.1642084, -5699.13477),
        ["Legend Gym"] = CFrame.new(4304.99023, 987.829956, -4124.2334)
    }
}

machineFolder:AddSwitch(
    "Start Machine Farm",
    function(enabled)
        working = enabled

        if enabled then
            if selectedLocation and selectedWorkout and workoutPositions[selectedWorkout][selectedLocation] then
                teleportAndStart(selectedWorkout, workoutPositions[selectedWorkout][selectedLocation])
            end
        end
    end
)

local locationDropdown =
    machineFolder:AddDropdown(
    "Select Gym",
    function(location)
        selectedLocation = location
    end
)

local workoutLocations = {"Jungle Gym", "Muscle King Gym", "Legend Gym"}
for _, location in ipairs(workoutLocations) do
    locationDropdown:Add(location)
end

local workoutDropdown =
    machineFolder:AddDropdown(
    "Select Machine",
    function(machine)
        selectedWorkout = machine
    end
)

local workoutTypes = {"Bench Press", "Squat", "Pull Up", "Boulder"}
for _, workout in ipairs(workoutTypes) do
    workoutDropdown:Add(workout)
end

local consumablesFolder = FarmingTab:AddFolder("Consumables")

local function activateProteinEgg()
    local tool = player.Character:FindFirstChild("Protein Egg") or player.Backpack:FindFirstChild("Protein Egg")
    if tool then
        player.muscleEvent:FireServer("proteinEgg", tool)
    end
end

local eggRunning = false
task.spawn(
    function()
        while true do
            if eggRunning then
                activateProteinEgg()
                task.wait(1800)
            else
                task.wait(1)
            end
        end
    end
)

consumablesFolder:AddSwitch(
    "Auto Egg",
    function(state)
        eggRunning = state
        if state then
            activateProteinEgg()
        end
    end
)

local function activateShake()
    local tool = player.Character:FindFirstChild("Tropical Shake") or player.Backpack:FindFirstChild("Tropical Shake")
    if tool then
        player.muscleEvent:FireServer("tropicalShake", tool)
    end
end

local shakeRunning = false
task.spawn(
    function()
        while true do
            if shakeRunning then
                activateShake()
                task.wait(900)
            else
                task.wait(1)
            end
        end
    end
)

consumablesFolder:AddSwitch(
    "Auto Shake",
    function(state)
        shakeRunning = state
        if state then
            activateShake()
        end
    end
)

local itemList = {
    "Tropical Shake",
    "Energy Shake",
    "Protein Bar",
    "TOUGH Bar",
    "Protein Shake",
    "ULTRA Shake",
    "Energy Bar"
}

local function formatEventName(itemName)
    local parts = {}
    for word in itemName:gmatch("%S+") do
        table.insert(parts, word:lower())
    end
    for i = 2, #parts do
        parts[i] = parts[i]:sub(1, 1):upper() .. parts[i]:sub(2)
    end
    return table.concat(parts)
end

local function activateRandomItems(count)
    local shuffledItems = {}
    for _, item in ipairs(itemList) do
        table.insert(shuffledItems, item)
    end
    for i = #shuffledItems, 2, -1 do
        local j = math.random(i)
        shuffledItems[i], shuffledItems[j] = shuffledItems[j], shuffledItems[i]
    end
    for i = 1, math.min(count, #shuffledItems) do
        local tool =
            player.Character:FindFirstChild(shuffledItems[i]) or player.Backpack:FindFirstChild(shuffledItems[i])
        if tool then
            local eventName = formatEventName(shuffledItems[i])
            player.muscleEvent:FireServer(eventName, tool)
        end
    end
end

local eatingRunning = false
task.spawn(
    function()
        while true do
            if eatingRunning then
                activateRandomItems(4)
                task.wait(0.5)
            else
                task.wait(0.5)
            end
        end
    end
)

consumablesFolder:AddSwitch(
    "Eat Everything",
    function(state)
        eatingRunning = state
        if state then
            activateRandomItems(4)
        end
    end
)

PetsTab:AddLabel("Pet Shop System")

local petDropdown =
    PetsTab:AddDropdown(
    "Choose Pet",
    function(text)
        selectedPet = text
    end
)

local petList = {
    "Darkstar Hunter",
    "Neon Guardian",
    "Blue Birdie",
    "Blue Bunny",
    "Blue Firecaster",
    "Blue Pheonix",
    "Crimson Falcon",
    "Cybernetic Showdown Dragon",
    "Dark Golem",
    "Dark Legends Manticore",
    "Dark Vampy",
    "Eternal Strike Leviathan",
    "Frostwave Legends Penguin",
    "Gold Warrior",
    "Golden Pheonix",
    "Golden Viking",
    "Green Butterfly",
    "Green Firecaster",
    "Infernal Dragon",
    "Lightning Strike Phantom",
    "Magic Butterfly",
    "Muscle Sensei",
    "Orange Hedgehog",
    "Orange Pegasus",
    "Phantom Genesis Dragon",
    "Purple Dragon",
    "Purple Falcon",
    "Red Dragon",
    "Red Firecaster",
    "Red Kitty",
    "Silver Dog",
    "Ultimate Supernova Pegasus",
    "Ultra Birdie",
    "White Pegasus",
    "White Pheonix",
    "Yellow Butterfly"
}

for _, pet in ipairs(petList) do
    petDropdown:Add(pet)
end

PetsTab:AddSwitch(
    "Buy Pet",
    function(bool)
        _G.AutoHatchPet = bool

        if bool then
            task.spawn(
                function()
                    while _G.AutoHatchPet and selectedPet ~= "" do
                        local petToOpen = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedPet)
                        if petToOpen then
                            ReplicatedStorage.cPetShopRemote:InvokeServer(petToOpen)
                        end
                        task.wait(0.1)
                    end
                end
            )
        end
    end
)

PetsTab:AddLabel("Aura System")

local auraDropdown =
    PetsTab:AddDropdown(
    "Select Aura",
    function(text)
        selectedAura = text
    end
)

local auraList = {
    "Entropic Blast",
    "Muscle King",
    "Astral Electro",
    "Azure Tundra",
    "Blue Aura",
    "Dark Electro",
    "Dark Lightning",
    "Dark Storm",
    "Electro",
    "Enchanted Mirage",
    "Eternal Megastrike",
    "Grand Supernova",
    "Green Aura",
    "Inferno",
    "Lightning",
    "Power Lightning",
    "Purple Aura",
    "Purple Nova",
    "Red Aura",
    "Supernova",
    "Ultra Inferno",
    "Ultra Mirage",
    "Unstable Mirage",
    "Yellow Aura"
}

for _, aura in ipairs(auraList) do
    auraDropdown:Add(aura)
end

PetsTab:AddSwitch(
    "Buy Aura",
    function(bool)
        _G.AutoHatchAura = bool

        if bool then
            task.spawn(
                function()
                    while _G.AutoHatchAura and selectedAura ~= "" do
                        local auraToOpen = ReplicatedStorage.cPetShopFolder:FindFirstChild(selectedAura)
                        if auraToOpen then
                            ReplicatedStorage.cPetShopRemote:InvokeServer(auraToOpen)
                        end
                        task.wait(0.1)
                    end
                end
            )
        end
    end
)

local petManagementFolder = PetsTab:AddFolder("Pet Management")

local function unequipAllPets()
    local petsFolder = player.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.1)
end

local function equipUniquePet(petName)
    unequipAllPets()
    task.wait(0.01)
    for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
        if pet.Name == petName then
            ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", pet)
        end
    end
end

petManagementFolder:AddButton(
    "Equip Swift Samurai",
    function()
        equipUniquePet("Swift Samurai")
    end
)

petManagementFolder:AddButton(
    "Equip Wild Wizard",
    function()
        equipUniquePet("Wild Wizard")
    end
)

petManagementFolder:AddButton(
    "Equip Mighty Monster",
    function()
        equipUniquePet("Mighty Monster")
    end
)

petManagementFolder:AddButton(
    "Equip Tribal Overlord",
    function()
        equipUniquePet("Tribal Overlord")
    end
)

petManagementFolder:AddButton(
    "Unequip All Pets",
    function()
        unequipAllPets()
    end
)

local inventoryFolder = PetsTab:AddFolder("Inventory Management")

local proteinEggLabel = inventoryFolder:AddLabel("Protein Eggs: 0")
local tropicalShakeLabel = inventoryFolder:AddLabel("Tropical Shakes: 0")

local function updateItemCount()
    local proteinEggCount = 0
    local tropicalShakeCount = 0

    local consumablesFolder = player:FindFirstChild("consumablesFolder")
    if consumablesFolder then
        for _, item in ipairs(consumablesFolder:GetChildren()) do
            if item.Name == "Protein Egg" then
                proteinEggCount = proteinEggCount + item.Value
            elseif item.Name == "Tropical Shake" then
                tropicalShakeCount = tropicalShakeCount + item.Value
            end
        end
    end

    proteinEggLabel.Text = "Protein Eggs: " .. proteinEggCount
    tropicalShakeLabel.Text = "Tropical Shakes: " .. tropicalShakeCount
end

task.spawn(
    function()
        while true do
            updateItemCount()
            task.wait(0.25)
        end
    end
)

local giftFolder = inventoryFolder:AddFolder("Gift System")
local selectedGiftPlayer = nil
local eggGiftCount = 0
local shakeGiftCount = 0

local giftPlayerDropdown =
    giftFolder:AddDropdown(
    "Choose Player",
    function(name)
        selectedGiftPlayer = Players:FindFirstChild(name)
    end
)

for _, targetPlayer in ipairs(Players:GetPlayers()) do
    if targetPlayer ~= player then
        giftPlayerDropdown:Add(targetPlayer.Name)
    end
end

Players.PlayerAdded:Connect(
    function(newPlayer)
        if newPlayer ~= player then
            giftPlayerDropdown:Add(newPlayer.Name)
        end
    end
)

giftFolder:AddTextBox(
    "Egg Amount",
    function(text)
        eggGiftCount = tonumber(text) or 0
    end
)

giftFolder:AddButton(
    "Gift Eggs",
    function()
        if selectedGiftPlayer and eggGiftCount and eggGiftCount > 0 then
            for i = 1, eggGiftCount do
                local args = {
                    [1] = "giftRequest",
                    [2] = selectedGiftPlayer,
                    [3] = player.consumablesFolder:FindFirstChild("Protein Egg")
                }
                ReplicatedStorage.rEvents.giftRemote:InvokeServer(unpack(args))
            end
        end
    end
)

giftFolder:AddTextBox(
    "Shake Amount",
    function(text)
        shakeGiftCount = tonumber(text) or 0
    end
)

giftFolder:AddButton(
    "Gift Shakes",
    function()
        if selectedGiftPlayer and shakeGiftCount and shakeGiftCount > 0 then
            for i = 1, shakeGiftCount do
                local args = {
                    [1] = "giftRequest",
                    [2] = selectedGiftPlayer,
                    [3] = player.consumablesFolder:FindFirstChild("Tropical Shake")
                }
                ReplicatedStorage.rEvents.giftRemote:InvokeServer(unpack(args))
            end
        end
    end
)

TeleportTab:AddLabel("Main Locations")

local mainTeleports = {
    {"Spawn", CFrame.new(2, 8, 115)},
    {"Main Island", CFrame.new(16.07, 9.08, 133.8)},
    {"Tiny Island", CFrame.new(-37.1, 9.2, 1919)},
    {"Beach", CFrame.new(-8, 9, -169.2)},
    {"Secret Area", CFrame.new(1947, 2, 6191)}
}

for _, tp in ipairs(mainTeleports) do
    TeleportTab:AddButton(
        tp[1],
        function()
            local char = player.Character or player.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = tp[2]
        end
    )
end

TeleportTab:AddLabel("Gyms")

local gymTeleports = {
    {"Muscle King Gym", CFrame.new(-8665.4, 17.21, -5792.9)},
    {"Jungle Gym", CFrame.new(-8543, 6.8, 2400)},
    {"Legends Gym", CFrame.new(4516, 991.5, -3856)},
    {"Infernal Gym", CFrame.new(-6759, 7.36, -1284)},
    {"Mythical Gym", CFrame.new(2250, 7.37, 1073.2)},
    {"Frost Gym", CFrame.new(-2623, 7.36, -409)},
    {"Eternal Gym", CFrame.new(-7176.19, 45.394, -1106.31)}
}

for _, tp in ipairs(gymTeleports) do
    TeleportTab:AddButton(
        tp[1],
        function()
            local char = player.Character or player.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = tp[2]
        end
    )
end

TeleportTab:AddLabel("Brawl Areas")

local brawlTeleports = {
    {"Brawl Regular", CFrame.new(-1849, 20, -6335)},
    {"Brawl Desert", CFrame.new(960, 17, -7398)},
    {"Brawl Lava", CFrame.new(4471, 119, -8836)},
    {"Beach Brawl", CFrame.new(-1849, 20, -6335)}
}

for _, tp in ipairs(brawlTeleports) do
    TeleportTab:AddButton(
        tp[1],
        function()
            local char = player.Character or player.CharacterAdded:Wait()
            local hrp = char:WaitForChild("HumanoidRootPart")
            hrp.CFrame = tp[2]
        end
    )
end

local specialFolder = TeleportTab:AddFolder("Special Teleports")

specialFolder:AddButton(
    "Jungle Squat Machine",
    function()
        local char = player.Character or player.CharacterAdded:Wait()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(-8371.43359375, 6.79806327, 2858.88525390)
        task.wait(0.2)
        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
        task.wait(0.05)
        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
    end
)

specialFolder:AddButton(
    "King Teleport + Auto",
    function()
        local char = player.Character or player.CharacterAdded:Wait()
        local hrp = char:WaitForChild("HumanoidRootPart")
        hrp.CFrame = CFrame.new(-8646, 17, -5738)
    end
)

MiscTab:AddLabel("Miscellaneous Features")

local movementFolder = MiscTab:AddFolder("Movement")

movementFolder:AddSwitch(
    "Infinite Jump",
    function(bool)
        _G.InfiniteJump = bool

        if bool then
            local InfiniteJumpConnection =
                UserInputService.JumpRequest:Connect(
                function()
                    if _G.InfiniteJump then
                        player.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
                    else
                        InfiniteJumpConnection:Disconnect()
                    end
                end
            )
        end
    end
)

movementFolder:AddSwitch(
    "No-Clip",
    function(bool)
        _G.NoClip = bool

        if bool then
            local noclipLoop =
                RunService.Stepped:Connect(
                function()
                    if _G.NoClip then
                        for _, part in pairs(player.Character:GetDescendants()) do
                            if part:IsA("BasePart") and part.CanCollide then
                                part.CanCollide = false
                            end
                        end
                    else
                        noclipLoop:Disconnect()
                    end
                end
            )
        end
    end
)

local visualFolder = MiscTab:AddFolder("Visual")

local timeDropdown =
    visualFolder:AddDropdown(
    "Change Time",
    function(selection)
        if selection == "Night" then
            Lighting.ClockTime = 0
        elseif selection == "Day" then
            Lighting.ClockTime = 12
        elseif selection == "Midnight" then
            Lighting.ClockTime = 6
        end
    end
)

timeDropdown:Add("Night")
timeDropdown:Add("Day")
timeDropdown:Add("Midnight")

visualFolder:AddButton(
    "Anti Lag",
    function()
        local playerGui = player:WaitForChild("PlayerGui")

        for _, gui in pairs(playerGui:GetChildren()) do
            if gui:IsA("ScreenGui") then
                gui:Destroy()
            end
        end

        local function darkenSky()
            for _, v in pairs(Lighting:GetChildren()) do
                if v:IsA("Sky") then
                    v:Destroy()
                end
            end

            local darkSky = Instance.new("Sky")
            darkSky.Name = "DarkSky"
            darkSky.SkyboxBk = "rbxassetid://0"
            darkSky.SkyboxDn = "rbxassetid://0"
            darkSky.SkyboxFt = "rbxassetid://0"
            darkSky.SkyboxLf = "rbxassetid://0"
            darkSky.SkyboxRt = "rbxassetid://0"
            darkSky.SkyboxUp = "rbxassetid://0"
            darkSky.Parent = Lighting

            Lighting.Brightness = 0
            Lighting.ClockTime = 0
            Lighting.TimeOfDay = "00:00:00"
            Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
            Lighting.Ambient = Color3.new(0, 0, 0)
            Lighting.FogColor = Color3.new(0, 0, 0)
            Lighting.FogEnd = 100
        end

        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("ParticleEmitter") or obj:IsA("PointLight") or obj:IsA("SpotLight") or obj:IsA("SurfaceLight") then
                obj:Destroy()
            end
        end

        darkenSky()
    end
)

local autoSystemsFolder = MiscTab:AddFolder("Auto Systems")

autoSystemsFolder:AddSwitch(
    "Auto Brawl Join",
    function(bool)
        getgenv().autoJoinBrawl = bool

        task.spawn(
            function()
                while getgenv().autoJoinBrawl and task.wait(0.5) do
                    if player.PlayerGui.gameGui.brawlJoinLabel.Visible then
                        ReplicatedStorage.rEvents.brawlEvent:FireServer("joinBrawl")
                        player.PlayerGui.gameGui.brawlJoinLabel.Visible = false
                    end
                end
            end
        )
    end
)

local brawlFolder = MiscTab:AddFolder("Brawl Systems")

brawlFolder:AddSwitch(
    "Auto Win Brawls",
    function(bool)
        getgenv().autoWinBrawl = bool

        local function equipPunch()
            if not getgenv().autoWinBrawl then
                return
            end

            local character = player.Character
            if not character then
                return false
            end

            if character:FindFirstChild("Punch") then
                return true
            end

            local backpack = player.Backpack
            if not backpack then
                return false
            end

            for _, tool in pairs(backpack:GetChildren()) do
                if tool.ClassName == "Tool" and tool.Name == "Punch" then
                    tool.Parent = character
                    return true
                end
            end
            return false
        end

        local function isValidTarget(targetPlayer)
            if not targetPlayer or not targetPlayer.Parent then
                return false
            end
            if targetPlayer == player then
                return false
            end

            local character = targetPlayer.Character
            if not character or not character.Parent then
                return false
            end

            local humanoid = character:FindFirstChild("Humanoid")
            if not humanoid then
                return false
            end

            if not humanoid.Health or humanoid.Health <= 0 then
                return false
            end
            if humanoid:GetState() == Enum.HumanoidStateType.Dead then
                return false
            end

            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if not rootPart or not rootPart.Parent then
                return false
            end

            return true
        end

        local function isLocalPlayerReady()
            local character = player.Character
            if not character or not character.Parent then
                return false
            end

            local humanoid = character:FindFirstChild("Humanoid")
            if not humanoid or humanoid.Health <= 0 then
                return false
            end

            local leftHand = character:FindFirstChild("LeftHand")
            local rightHand = character:FindFirstChild("RightHand")

            return (leftHand ~= nil or rightHand ~= nil)
        end

        local function safeTouchInterest(targetPart, localPart)
            if not targetPart or not targetPart.Parent then
                return false
            end
            if not localPart or not localPart.Parent then
                return false
            end

            local success, err =
                pcall(
                function()
                    firetouchinterest(targetPart, localPart, 0)
                    task.wait(0.01)
                    firetouchinterest(targetPart, localPart, 1)
                end
            )

            return success
        end

        task.spawn(
            function()
                while getgenv().autoWinBrawl and task.wait(0.5) do
                    equipPunch()
                end
            end
        )

        task.spawn(
            function()
                while getgenv().autoWinBrawl and task.wait(0.1) do
                    if isLocalPlayerReady() and ReplicatedStorage.brawlInProgress.Value then
                        pcall(
                            function()
                                player.muscleEvent:FireServer("punch", "rightHand")
                            end
                        )
                        pcall(
                            function()
                                player.muscleEvent:FireServer("punch", "leftHand")
                            end
                        )
                    end
                end
            end
        )

        task.spawn(
            function()
                while getgenv().autoWinBrawl and task.wait(0.05) do
                    if isLocalPlayerReady() and ReplicatedStorage.brawlInProgress.Value then
                        local character = player.Character
                        local leftHand = character:FindFirstChild("LeftHand")
                        local rightHand = character:FindFirstChild("RightHand")

                        for _, targetPlayer in pairs(Players:GetPlayers()) do
                            if not getgenv().autoWinBrawl then
                                break
                            end

                            pcall(
                                function()
                                    if isValidTarget(targetPlayer) then
                                        local targetRoot = targetPlayer.Character.HumanoidRootPart

                                        if leftHand then
                                            safeTouchInterest(targetRoot, leftHand)
                                        end

                                        if rightHand then
                                            safeTouchInterest(targetRoot, rightHand)
                                        end
                                    end
                                end
                            )

                            task.wait(0.01)
                        end
                    end
                end
            end
        )
    end
)

local premiumFolder = MiscTab:AddFolder("Premium Systems")

local function unequipAllPetsPremium()
    local petsFolder = player.petsFolder
    for _, folder in pairs(petsFolder:GetChildren()) do
        if folder:IsA("Folder") then
            for _, pet in pairs(folder:GetChildren()) do
                ReplicatedStorage.rEvents.equipPetEvent:FireServer("unequipPet", pet)
            end
        end
    end
    task.wait(0.1)
end

local function equipUniquePetPremium(petName)
    unequipAllPetsPremium()
    task.wait(0.01)
    for _, pet in pairs(player.petsFolder.Unique:GetChildren()) do
        if pet.Name == petName then
            ReplicatedStorage.rEvents.equipPetEvent:FireServer("equipPet", pet)
        end
    end
end

local function findMachine(machineName)
    local machine = workspace.machinesFolder:FindFirstChild(machineName)
    if not machine then
        for _, folder in pairs(workspace:GetChildren()) do
            if folder:IsA("Folder") and folder.Name:find("machines") then
                machine = folder:FindFirstChild(machineName)
                if machine then
                    break
                end
            end
        end
    end
    return machine
end

local function pressEPremium()
    VirtualInputManager:SendKeyEvent(true, "E", false, game)
    task.wait(0.1)
    VirtualInputManager:SendKeyEvent(false, "E", false, game)
end

local targetRebirthPremium = math.huge
premiumFolder:AddTextBox(
    "Target Rebirth",
    function(text)
        targetRebirthPremium = tonumber(text) or math.huge
    end
)

local positionLockConnection = nil
local function lockPlayerPosition(position)
    if positionLockConnection then
        positionLockConnection:Disconnect()
    end

    positionLockConnection =
        RunService.Heartbeat:Connect(
        function()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = position
            end
        end
    )
end

local function unlockPlayerPosition()
    if positionLockConnection then
        positionLockConnection:Disconnect()
        positionLockConnection = nil
    end
end

premiumFolder:AddSwitch(
    "Lock Position",
    function(bool)
        if bool then
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local currentPosition = player.Character.HumanoidRootPart.CFrame
                lockPlayerPosition(currentPosition)
            end
        else
            unlockPlayerPosition()
        end
    end
)

local isRunning = false
premiumFolder:AddSwitch(
    "Rebirth Farm",
    function(bool)
        isRunning = bool

        task.spawn(
            function()
                while isRunning do
                    local currentRebirths = player.leaderstats.Rebirths.Value
                    local rebirthCost = 10000 + (5000 * currentRebirths)

                    if player.ultimatesFolder:FindFirstChild("Golden Rebirth") then
                        local goldenRebirths = player.ultimatesFolder["Golden Rebirth"].Value
                        rebirthCost = math.floor(rebirthCost * (1 - (goldenRebirths * 0.1)))
                    end

                    unequipAllPetsPremium()
                    task.wait(0.1)
                    equipUniquePetPremium("Swift Samurai")

                    while isRunning and player.leaderstats.Strength.Value < rebirthCost do
                        for i = 1, 10 do
                            player.muscleEvent:FireServer("rep")
                        end
                        task.wait()
                    end

                    unequipAllPetsPremium()
                    task.wait(0.1)
                    equipUniquePetPremium("Tribal Overlord")

                    local machine = findMachine("Jungle Bar Lift")
                    if machine and machine:FindFirstChild("interactSeat") then
                        player.Character.HumanoidRootPart.CFrame = machine.interactSeat.CFrame * CFrame.new(0, 3, 0)
                        repeat
                            task.wait(0.1)
                            pressEPremium()
                        until player.Character.Humanoid.Sit
                    end

                    local initialRebirths = player.leaderstats.Rebirths.Value
                    repeat
                        ReplicatedStorage.rEvents.rebirthRemote:InvokeServer("rebirthRequest")
                        task.wait(0.1)
                    until player.leaderstats.Rebirths.Value > initialRebirths

                    if not isRunning then
                        break
                    end
                    task.wait()
                end
            end
        )
    end
)

premiumFolder:AddSwitch(
    "Hide Frames",
    function(bool)
        for _, obj in pairs(ReplicatedStorage:GetChildren()) do
            if obj.Name:match("Frame$") and obj:IsA("GuiObject") then
                obj.Visible = not bool
            end
        end
    end
)

premiumFolder:AddSwitch(
    "Fast Strength",
    function(bool)
        local isGrinding = bool

        if not bool then
            unequipAllPetsPremium()
            return
        end

        equipUniquePetPremium("Swift Samurai")

        for i = 1, 14 do
            task.spawn(
                function()
                    while isGrinding do
                        player.muscleEvent:FireServer("rep")
                        task.wait()
                    end
                end
            )
        end
    end
)

StatsTab:AddLabel("Session Statistics")

local sessionStartTime = os.time()
local sessionStartStrength = 0
local sessionStartDurability = 0
local sessionStartRebirths = 0
local sessionStartKills = 0
local sessionStartBrawls = 0
local sessionStartAgility = 0
local hasStartedTracking = false

local sessionTimeLabel = StatsTab:AddLabel("Session Time: 00:00:00")
local strengthStatsLabel = StatsTab:AddLabel("Strength: Waiting...")
local strengthGainLabel = StatsTab:AddLabel("Gained: 0")
local durabilityStatsLabel = StatsTab:AddLabel("Durability: Waiting...")
local durabilityGainLabel = StatsTab:AddLabel("Gained: 0")
local rebirthsStatsLabel = StatsTab:AddLabel("Rebirths: Waiting...")
local rebirthsGainLabel = StatsTab:AddLabel("Gained: 0")
local killsStatsLabel = StatsTab:AddLabel("Kills: Waiting...")
local killsGainLabel = StatsTab:AddLabel("Gained: 0")
local brawlsStatsLabel = StatsTab:AddLabel("Brawls: Waiting...")
local brawlsGainLabel = StatsTab:AddLabel("Gained: 0")
local agilityStatsLabel = StatsTab:AddLabel("Agility: Waiting...")
local agilityGainLabel = StatsTab:AddLabel("Gained: 0")

local strengthHistory = {}
local durabilityHistory = {}
local calculationInterval = 10
local trackingStarted = false
local fastRepStartTime = tick()

local projectedStrengthLabel = StatsTab:AddLabel("Strength Pace: 0 /Hour | 0 /Day")
local projectedDurabilityLabel = StatsTab:AddLabel("Durability Pace: 0 /Hour | 0 /Day")
local fastRepTimeLabel = StatsTab:AddLabel("Fast Rep Time: 0d 0h 0m 0s")

local function formatTime(seconds)
    local days = math.floor(seconds / 86400)
    local hours = math.floor((seconds % 86400) / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60

    if days > 0 then
        return string.format("%dd %02dh %02dm %02ds", days, hours, minutes, secs)
    else
        return string.format("%02d:%02d:%02d", hours, minutes, secs)
    end
end

local function startTracking()
    if not hasStartedTracking then
        sessionStartStrength = player.leaderstats.Strength.Value
        sessionStartDurability = player.Durability.Value
        sessionStartKills = player.leaderstats.Kills.Value
        sessionStartRebirths = player.leaderstats.Rebirths.Value
        sessionStartBrawls = player.leaderstats.Brawls.Value
        sessionStartAgility = player.Agility.Value
        sessionStartTime = os.time()
        hasStartedTracking = true
    end
end

local function updateStats()
    if not hasStartedTracking then
        startTracking()
    end

    local currentStrength = player.leaderstats.Strength.Value
    local currentDurability = player.Durability.Value
    local currentKills = player.leaderstats.Kills.Value
    local currentRebirths = player.leaderstats.Rebirths.Value
    local currentBrawls = player.leaderstats.Brawls.Value
    local currentAgility = player.Agility.Value

    local strengthGain = currentStrength - sessionStartStrength
    local durabilityGain = currentDurability - sessionStartDurability
    local killsGain = currentKills - sessionStartKills
    local rebirthsGain = currentRebirths - sessionStartRebirths
    local brawlsGain = currentBrawls - sessionStartBrawls
    local agilityGain = currentAgility - sessionStartAgility

    strengthStatsLabel.Text = "Strength: " .. formatNumber(currentStrength)
    strengthGainLabel.Text = "Gained: " .. formatNumber(strengthGain)

    durabilityStatsLabel.Text = "Durability: " .. formatNumber(currentDurability)
    durabilityGainLabel.Text = "Gained: " .. formatNumber(durabilityGain)

    rebirthsStatsLabel.Text = "Rebirths: " .. formatNumber(currentRebirths)
    rebirthsGainLabel.Text = "Gained: " .. formatNumber(rebirthsGain)

    killsStatsLabel.Text = "Kills: " .. formatNumber(currentKills)
    killsGainLabel.Text = "Gained: " .. formatNumber(killsGain)

    brawlsStatsLabel.Text = "Brawls: " .. formatNumber(currentBrawls)
    brawlsGainLabel.Text = "Gained: " .. formatNumber(brawlsGain)

    agilityStatsLabel.Text = "Agility: " .. formatNumber(currentAgility)
    agilityGainLabel.Text = "Gained: " .. formatNumber(agilityGain)

    local elapsedTime = os.time() - sessionStartTime
    sessionTimeLabel.Text = "Session Time: " .. formatTime(elapsedTime)
end

task.spawn(
    function()
        local lastCalcTime = tick()
        local initialStrength = player.leaderstats.Strength.Value
        local initialDurability = player.Durability.Value

        while true do
            local currentTime = tick()
            local currentStrength = player.leaderstats.Strength.Value
            local currentDurability = player.Durability.Value

            if not trackingStarted and (currentStrength - initialStrength) >= 100e9 then
                trackingStarted = true
                fastRepStartTime = tick()
                strengthHistory = {}
                durabilityHistory = {}
            end

            if trackingStarted then
                local elapsedTime = currentTime - fastRepStartTime
                local days = math.floor(elapsedTime / (24 * 3600))
                local hours = math.floor((elapsedTime % (24 * 3600)) / 3600)
                local minutes = math.floor((elapsedTime % 3600) / 60)
                local seconds = math.floor(elapsedTime % 60)

                fastRepTimeLabel.Text = string.format("Fast Rep Time: %dd %dh %dm %ds", days, hours, minutes, seconds)

                table.insert(strengthHistory, {time = currentTime, value = currentStrength})
                table.insert(durabilityHistory, {time = currentTime, value = currentDurability})

                while #strengthHistory > 0 and currentTime - strengthHistory[1].time > calculationInterval do
                    table.remove(strengthHistory, 1)
                end
                while #durabilityHistory > 0 and currentTime - durabilityHistory[1].time > calculationInterval do
                    table.remove(durabilityHistory, 1)
                end

                if currentTime - lastCalcTime >= calculationInterval then
                    lastCalcTime = currentTime

                    if #strengthHistory >= 2 then
                        local strengthDelta = strengthHistory[#strengthHistory].value - strengthHistory[1].value
                        local strengthPerSecond = strengthDelta / calculationInterval
                        local strengthPerHour = math.floor(strengthPerSecond * 3600)
                        local strengthPerDay = math.floor(strengthPerSecond * 86400)

                        projectedStrengthLabel.Text =
                            "Strength Pace: " ..
                            formatNumber(strengthPerHour) .. "/Hour | " .. formatNumber(strengthPerDay) .. "/Day"
                    end

                    if #durabilityHistory >= 2 then
                        local durabilityDelta = durabilityHistory[#durabilityHistory].value - durabilityHistory[1].value
                        local durabilityPerSecond = durabilityDelta / calculationInterval
                        local durabilityPerHour = math.floor(durabilityPerSecond * 3600)
                        local durabilityPerDay = math.floor(durabilityPerSecond * 86400)

                        projectedDurabilityLabel.Text =
                            "Durability Pace: " ..
                            formatNumber(durabilityPerHour) .. "/Hour | " .. formatNumber(durabilityPerDay) .. "/Day"
                    end
                end
            end

            task.wait(0.05)
        end
    end
)

task.spawn(
    function()
        while wait(2) do
            updateStats()
        end
    end
)

local statManagementFolder = StatsTab:AddFolder("Stat Management")

statManagementFolder:AddButton(
    "Reset Session Stats",
    function()
        sessionStartStrength = player.leaderstats.Strength.Value
        sessionStartDurability = player.Durability.Value
        sessionStartKills = player.leaderstats.Kills.Value
        sessionStartRebirths = player.leaderstats.Rebirths.Value
        sessionStartBrawls = player.leaderstats.Brawls.Value
        sessionStartAgility = player.Agility.Value
        sessionStartTime = os.time()
        hasStartedTracking = false
        startTracking()
    end
)

statManagementFolder:AddButton(
    "Copy Stats To Clipboard",
    function()
        local statsText = "Muscle Legends Statistics:\\n\\n"

        statsText = statsText .. "Current Stats:\\n"
        statsText = statsText .. "Strength: " .. formatWithCommas(player.leaderstats.Strength.Value) .. "\\n"
        statsText = statsText .. "Durability: " .. formatWithCommas(player.Durability.Value) .. "\\n"
        statsText = statsText .. "Rebirths: " .. formatWithCommas(player.leaderstats.Rebirths.Value) .. "\\n"
        statsText = statsText .. "Kills: " .. formatWithCommas(player.leaderstats.Kills.Value) .. "\\n"
        statsText = statsText .. "Brawls: " .. formatWithCommas(player.leaderstats.Brawls.Value) .. "\\n"
        statsText = statsText .. "Agility: " .. formatWithCommas(player.Agility.Value) .. "\\n\\n"

        if hasStartedTracking then
            local elapsedTime = os.time() - sessionStartTime
            local strengthGain = player.leaderstats.Strength.Value - sessionStartStrength
            local durabilityGain = player.Durability.Value - sessionStartDurability
            local killsGain = player.leaderstats.Kills.Value - sessionStartKills
            local rebirthsGain = player.leaderstats.Rebirths.Value - sessionStartRebirths
            local brawlsGain = player.leaderstats.Brawls.Value - sessionStartBrawls
            local agilityGain = player.Agility.Value - sessionStartAgility

            statsText = statsText .. "Session Statistics:\\n"
            statsText = statsText .. "Session Time: " .. formatTime(elapsedTime) .. "\\n"
            statsText = statsText .. "Strength Gained: " .. formatWithCommas(strengthGain) .. "\\n"
            statsText = statsText .. "Durability Gained: " .. formatWithCommas(durabilityGain) .. "\\n"
            statsText = statsText .. "Rebirths Gained: " .. formatWithCommas(rebirthsGain) .. "\\n"
            statsText = statsText .. "Kills Gained: " .. formatWithCommas(killsGain) .. "\\n"
            statsText = statsText .. "Brawls Gained: " .. formatWithCommas(brawlsGain) .. "\\n"
            statsText = statsText .. "Agility Gained: " .. formatWithCommas(agilityGain) .. "\\n"
        end

        setclipboard(statsText)
    end
)

updateStats()
library:Init()
